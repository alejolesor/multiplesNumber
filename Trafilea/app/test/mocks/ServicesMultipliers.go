// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (mock "github.com/stretchr/testify/mock"
"TRAFILEA/usecases") 



// ServicesMultipliers is an autogenerated mock type for the ServicesMultipliers type
type ServicesMultipliers struct {
	mock.Mock
}

// GetMultiplierCollection provides a mock function with given fields:
func (_m *ServicesMultipliers) GetMultiplierCollection() []usecases.MultiplesByType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMultiplierCollection")
	}

	var r0 []usecases.MultiplesByType
	if rf, ok := ret.Get(0).(func() []usecases.MultiplesByType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]usecases.MultiplesByType)
		}
	}

	return r0
}

// GetMultipliers provides a mock function with given fields: num
func (_m *ServicesMultipliers) GetMultipliers(num int) []usecases.MultiplesByType {
	ret := _m.Called(num)

	if len(ret) == 0 {
		panic("no return value specified for GetMultipliers")
	}

	var r0 []usecases.MultiplesByType
	if rf, ok := ret.Get(0).(func(int) []usecases.MultiplesByType); ok {
		r0 = rf(num)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]usecases.MultiplesByType)
		}
	}

	return r0
}

// GetValueByNumber provides a mock function with given fields: num
func (_m *ServicesMultipliers) GetValueByNumber(num int) (usecases.MultiplesByType, error) {
	ret := _m.Called(num)

	if len(ret) == 0 {
		panic("no return value specified for GetValueByNumber")
	}

	var r0 usecases.MultiplesByType
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (usecases.MultiplesByType, error)); ok {
		return rf(num)
	}
	if rf, ok := ret.Get(0).(func(int) usecases.MultiplesByType); ok {
		r0 = rf(num)
	} else {
		r0 = ret.Get(0).(usecases.MultiplesByType)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(num)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveMultiplier provides a mock function with given fields: num
func (_m *ServicesMultipliers) SaveMultiplier(num int) bool {
	_m.Called(num)
	var r0 bool

	return r0
}

// NewServicesMultipliers creates a new instance of ServicesMultipliers. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServicesMultipliers(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServicesMultipliers {
	mock := &ServicesMultipliers{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
